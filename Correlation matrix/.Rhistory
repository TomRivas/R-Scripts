diagonals[[name]] <- p
}
## List of scatter plots
scatters <- list()
for (i in 1:(n-1)) {
for (j in (i+1):n) {
# Data frame
df.point <- na.omit(data.frame(cbind(x = df[ , j], y = df[ , i])))
# Plot, color code based on comparisons between biological replicates
if((j == i+1) && (j%%2==0)){
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2), aes(color = "orangered2")) +
stat_smooth(method="lm", colour="black") +
theme_bw() + theme(panel.grid = element_blank())
}else {
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2)) +
stat_smooth(method="lm", colour="gray84") +
theme_bw() + theme(panel.grid = element_blank())
}
name <- paste0("Item", j, i)
scatters[[name]] <- p
}
}
# Convert the ggplots to grobs,
# and select only the plot panels
scatterGrob <- llply(scatters, ggplotGrob)
scatterGrob <- llply(scatterGrob, gtable_filter, "panel")
tileGrob <- llply(heatmaps, ggplotGrob)
tileGrob <- llply(tileGrob, gtable_filter, "panel")
diagonalGrob <- llply(diagonals, ggplotGrob)
diagonalGrob <- llply(diagonalGrob, gtable_filter, "panel")
## Set up the gtable layout
gt <- gtable(unit(rep(1, n), "null"), unit(rep(1, n), "null"))
## Add the plots to the layout
#Diagonal plots along the diagonal
for(i in 1:n) {
gt <- gtable_add_grob(gt, diagonalGrob[[i]], t=i, l=i)
}
# heatmaps in the lower half
k <- 1
for (i in 2:n) {
for (j in 1:(i-1)) {
gt <- gtable_add_grob(gt, tileGrob[[k]], t=i, l=j)
k <- k+1
} }
# scatters in the upper half
k <- 1
for (i in 1:(n-1)) {
for (j in (i+1):n) {
gt <- gtable_add_grob(gt, scatterGrob[[k]], t=i, l=j)
k <- k+1
} }
#Add item labels
gt <- gtable_add_cols(gt, unit(1.5, "lines"), 0)
gt <- gtable_add_rows(gt, unit(1.5, "lines"), 2*n)
for(i in 1:n) {
textGrob <- textGrob(labels[i], gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=n+1, l=i+1)
}
for(i in 1:n) {
textGrob <- textGrob(labels[i], rot = 90, gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=i, l=1)
}
# Add small gap between the panels
for(i in n:1) gt <- gtable_add_cols(gt, unit(0.2, "lines"), i)
for(i in (n-1):1) gt <- gtable_add_rows(gt, unit(0.2, "lines"), i)
# Add chart title
# gt <- gtable_add_rows(gt, unit(1.5, "lines"), 0)
# textGrob <- textGrob("Correlation Matrix", gp = gpar(fontfamily = "Helvetica", fontface = "bold", fontsize = 8))
# gt <- gtable_add_grob(gt, textGrob, t=1, l=3, r=2*n+1)
#Add margins to the whole plot
for(i in c(2*n+1, 0)) {
gt <- gtable_add_cols(gt, unit(.75, "lines"), i)
gt <- gtable_add_rows(gt, unit(.75, "lines"), i)
}
grid.newpage()
grid.draw(gt)
cor$estimate
n <- dim(df)[2] #number of columns
labels <- colnames(df) #makes a list of conditions
sizeItem = 16
sizeCor = 4
#list of heatmap plots
heatmaps <- list()
for (i in 2:n) { #starting in 2nd row
for (j in 1:(i-1)) { #starting in 1st column, limited to number of row - 1/bottom half of diagonal
# Data frame  of correlation values
df.point <- na.omit(data.frame(cbind(x = df[ , j], y = df[ , i])))
x = df.point[, 1]
y = df.point[, 2]
correlation = cor.test(x, y)
cor <- data.frame(rsquared = correlation$estimate * correlation$estimate)
cor$cor = paste0("R = ", sprintf("%.4f",correlation$estimate), "\n",
"R^2 = ", sprintf("%.4f", cor$rsquared))
# Plot, color code based on direct comparisons between condition replicates
if((i == j+1) && (i%%2==0)){
p <- ggplot(cor, aes(x = 1, y = 1)) +
geom_tile(fill = "orangered1", width=1, height=1) +
geom_text(aes(x = 1, y = 1, label = cor), colour = "White", size = 3, family = "Helvetica", show.legend = FALSE) +
theme_bw()+
theme(panel.grid = element_blank())
}else{
p <- ggplot(cor, aes(x = 1, y = 1)) +
geom_tile(fill = "steelblue") +
geom_text(aes(x = 1, y = 1, label = cor), colour = "White", size = 3, family = "Helvetica", show.legend = FALSE) +
theme_bw() +
theme(panel.grid = element_blank())
}
name <- paste0("Item", j, i)
heatmaps[[name]] <- p
}
}
#diagonals, diagonal line separating halves
diagonals <- list()
for(i in 1:n){
p <- ggplot()+
geom_abline(slope=-1, intercept = 1)+
theme_bw() + theme(panel.grid = element_blank())
name <- paste0("Item", i)
diagonals[[name]] <- p
}
## List of scatter plots
scatters <- list()
for (i in 1:(n-1)) {
for (j in (i+1):n) {
# Data frame
df.point <- na.omit(data.frame(cbind(x = df[ , j], y = df[ , i])))
# Plot, color code based on comparisons between biological replicates
if((j == i+1) && (j%%2==0)){
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2), aes(color = "orangered2")) +
stat_smooth(method="lm", colour="black") +
theme_bw() + theme(panel.grid = element_blank())
}else {
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2)) +
stat_smooth(method="lm", colour="gray84") +
theme_bw() + theme(panel.grid = element_blank())
}
name <- paste0("Item", j, i)
scatters[[name]] <- p
}
}
# Convert the ggplots to grobs,
# and select only the plot panels
scatterGrob <- llply(scatters, ggplotGrob)
scatterGrob <- llply(scatterGrob, gtable_filter, "panel")
tileGrob <- llply(heatmaps, ggplotGrob)
tileGrob <- llply(tileGrob, gtable_filter, "panel")
diagonalGrob <- llply(diagonals, ggplotGrob)
diagonalGrob <- llply(diagonalGrob, gtable_filter, "panel")
## Set up the gtable layout
gt <- gtable(unit(rep(1, n), "null"), unit(rep(1, n), "null"))
## Add the plots to the layout
#Diagonal plots along the diagonal
for(i in 1:n) {
gt <- gtable_add_grob(gt, diagonalGrob[[i]], t=i, l=i)
}
# heatmaps in the lower half
k <- 1
for (i in 2:n) {
for (j in 1:(i-1)) {
gt <- gtable_add_grob(gt, tileGrob[[k]], t=i, l=j)
k <- k+1
} }
# scatters in the upper half
k <- 1
for (i in 1:(n-1)) {
for (j in (i+1):n) {
gt <- gtable_add_grob(gt, scatterGrob[[k]], t=i, l=j)
k <- k+1
} }
#Add item labels
gt <- gtable_add_cols(gt, unit(1.5, "lines"), 0)
gt <- gtable_add_rows(gt, unit(1.5, "lines"), 2*n)
for(i in 1:n) {
textGrob <- textGrob(labels[i], gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=n+1, l=i+1)
}
for(i in 1:n) {
textGrob <- textGrob(labels[i], rot = 90, gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=i, l=1)
}
# Add small gap between the panels
for(i in n:1) gt <- gtable_add_cols(gt, unit(0.2, "lines"), i)
for(i in (n-1):1) gt <- gtable_add_rows(gt, unit(0.2, "lines"), i)
# Add chart title
# gt <- gtable_add_rows(gt, unit(1.5, "lines"), 0)
# textGrob <- textGrob("Correlation Matrix", gp = gpar(fontfamily = "Helvetica", fontface = "bold", fontsize = 8))
# gt <- gtable_add_grob(gt, textGrob, t=1, l=3, r=2*n+1)
#Add margins to the whole plot
for(i in c(2*n+1, 0)) {
gt <- gtable_add_cols(gt, unit(.75, "lines"), i)
gt <- gtable_add_rows(gt, unit(.75, "lines"), i)
}
grid.newpage()
grid.draw(gt)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(gtable)
library(grid)
library(plyr)
library(extrafont)
font_import(pattern="[H/h]elvetica")
directory <- "C:/Users/Tom/Documents/Bedtools_count/all_UCSC_refseq/"
files <- grep("count", list.files(directory), value=TRUE)
sample_names <- str_remove(files, "_count_allUCSCRefSeq_Hg19.bed")
for(i in 1:length(sample_names)){
if(i==1){
df <- assign(sample_names[i], read_delim(directory %>% paste(files[i], sep=""),
delim = "\t",
col_names=c("chr","start","stop","gene","quality","strand","?","size","depth","?","?","?",sample_names[i])) %>% select(1:6,13))
} else{
df %<>% left_join(read_delim(directory %>% paste(files[i], sep=""),
delim = "\t",
col_names=c("chr","start","stop","gene","quality","strand","?","size","depth","?","?","?", sample_names[i])) %>% select(1:6,13),
by = c("chr" = "chr","start"="start","stop"="stop","gene"="gene","quality"="quality","strand"="strand"))
}
}
list <- read_delim("C:/Users/Tom/Documents/bed_files/UCSC Refseq/UCSCrefseq_singleisoform_noannotation.bed",
delim = "\t",
col_names = c("chr","start","stop","gene","quality","strand"))
df %<>% semi_join(list, by = c("chr" = "chr","start"="start","stop"="stop","gene"="gene","quality"="quality","strand"="strand"))
df %<>% select(4,7:(7+length(sample_names)-1))
df <- df[, c(1,4,5,6,7,2,3)]
df %<>% column_to_rownames(var="gene")
colnames(df) <- c("Mock_1","Mock_2","WT_1","WT_2","n12_1","n12_2")
pearson <- as.matrix(cor(df, method = c("pearson")))
r2 <- pearson * pearson
rm(dICP41,list, directory, files, i, sample_names)
n <- dim(df)[2] #number of columns
labels <- colnames(df) #makes a list of conditions
sizeItem = 16
sizeCor = 4
#list of heatmap plots
heatmaps <- list()
for (i in 2:n) { #starting in 2nd row
for (j in 1:(i-1)) { #starting in 1st column, limited to number of row - 1/bottom half of diagonal
# Data frame  of correlation values
df.point <- na.omit(data.frame(cbind(x = df[ , j], y = df[ , i])))
x = df.point[, 1]
y = df.point[, 2]
correlation = cor.test(x, y)
cor <- data.frame(rsquared = correlation$estimate * correlation$estimate)
cor$cor = paste0("R = ", sprintf("%.4f",correlation$estimate), "\n",
"R^2 = ", sprintf("%.4f", cor$rsquared))
# Plot, color code based on direct comparisons between condition replicates
if((i == j+1) && (i%%2==0)){
p <- ggplot(cor, aes(x = 1, y = 1)) +
geom_tile(fill = "orangered1", width=1, height=1) +
geom_text(aes(x = 1, y = 1, label = cor), colour = "White", size = 3, family = "Helvetica", show.legend = FALSE) +
theme_bw()+
theme(panel.grid = element_blank())
}else{
p <- ggplot(cor, aes(x = 1, y = 1)) +
geom_tile(fill = "steelblue") +
geom_text(aes(x = 1, y = 1, label = cor), colour = "White", size = 3, family = "Helvetica", show.legend = FALSE) +
theme_bw() +
theme(panel.grid = element_blank())
}
name <- paste0("Item", j, i)
heatmaps[[name]] <- p
}
}
#diagonals, diagonal line separating halves
diagonals <- list()
for(i in 1:n){
p <- ggplot()+
geom_abline(slope=-1, intercept = 1)+
theme_bw() + theme(panel.grid = element_blank())
name <- paste0("Item", i)
diagonals[[name]] <- p
}
## List of scatter plots
scatters <- list()
for (i in 1:(n-1)) {
for (j in (i+1):n) {
# Data frame
df.point <- na.omit(data.frame(cbind(x = df[ , j], y = df[ , i])))
# Plot, color code based on comparisons between biological replicates
if((j == i+1) && (j%%2==0)){
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2), aes(color = "orangered2")) +
stat_smooth(method="lm", colour="black") +
theme_bw() + theme(panel.grid = element_blank())
}else {
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2)) +
stat_smooth(method="lm", colour="gray84") +
theme_bw() + theme(panel.grid = element_blank())
}
name <- paste0("Item", j, i)
scatters[[name]] <- p
}
}
# Convert the ggplots to grobs,
# and select only the plot panels
scatterGrob <- llply(scatters, ggplotGrob)
scatterGrob <- llply(scatterGrob, gtable_filter, "panel")
tileGrob <- llply(heatmaps, ggplotGrob)
tileGrob <- llply(tileGrob, gtable_filter, "panel")
diagonalGrob <- llply(diagonals, ggplotGrob)
diagonalGrob <- llply(diagonalGrob, gtable_filter, "panel")
## Set up the gtable layout
gt <- gtable(unit(rep(1, n), "null"), unit(rep(1, n), "null"))
## Add the plots to the layout
#Diagonal plots along the diagonal
for(i in 1:n) {
gt <- gtable_add_grob(gt, diagonalGrob[[i]], t=i, l=i)
}
# heatmaps in the lower half
k <- 1
for (i in 2:n) {
for (j in 1:(i-1)) {
gt <- gtable_add_grob(gt, tileGrob[[k]], t=i, l=j)
k <- k+1
} }
# scatters in the upper half
k <- 1
for (i in 1:(n-1)) {
for (j in (i+1):n) {
gt <- gtable_add_grob(gt, scatterGrob[[k]], t=i, l=j)
k <- k+1
} }
#Add item labels
gt <- gtable_add_cols(gt, unit(1.5, "lines"), 0)
gt <- gtable_add_rows(gt, unit(1.5, "lines"), 2*n)
for(i in 1:n) {
textGrob <- textGrob(labels[i], gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=n+1, l=i+1)
}
for(i in 1:n) {
textGrob <- textGrob(labels[i], rot = 90, gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=i, l=1)
}
# Add small gap between the panels
for(i in n:1) gt <- gtable_add_cols(gt, unit(0.2, "lines"), i)
for(i in (n-1):1) gt <- gtable_add_rows(gt, unit(0.2, "lines"), i)
# Add chart title
# gt <- gtable_add_rows(gt, unit(1.5, "lines"), 0)
# textGrob <- textGrob("Correlation Matrix", gp = gpar(fontfamily = "Helvetica", fontface = "bold", fontsize = 8))
# gt <- gtable_add_grob(gt, textGrob, t=1, l=3, r=2*n+1)
#Add margins to the whole plot
for(i in c(2*n+1, 0)) {
gt <- gtable_add_cols(gt, unit(.75, "lines"), i)
gt <- gtable_add_rows(gt, unit(.75, "lines"), i)
}
grid.newpage()
grid.draw(gt)
tiff("correlation_matrix.tiff", height=5, width=5, units="in", res = 300)
grid.newpage()
grid.draw(gt)
while (!is.null(dev.list()))  dev.off()
library(tidyverse)
library(magrittr)
library(ggplot2)
library(gtable)
library(grid)
library(plyr)
library(extrafont)
font_import(pattern="[H/h]elvetica")
directory <- "C:/Users/Tom/Documents/Bedtools_count/all_UCSC_refseq/"
files <- grep("count", list.files(directory), value=TRUE)
sample_names <- str_remove(files, "_count_allUCSCRefSeq_Hg19.bed")
for(i in 1:length(sample_names)){
if(i==1){
df <- assign(sample_names[i], read_delim(directory %>% paste(files[i], sep=""),
delim = "\t",
col_names=c("chr","start","stop","gene","quality","strand","?","size","depth","?","?","?",sample_names[i])) %>% select(1:6,13))
} else{
df %<>% left_join(read_delim(directory %>% paste(files[i], sep=""),
delim = "\t",
col_names=c("chr","start","stop","gene","quality","strand","?","size","depth","?","?","?", sample_names[i])) %>% select(1:6,13),
by = c("chr" = "chr","start"="start","stop"="stop","gene"="gene","quality"="quality","strand"="strand"))
}
}
list <- read_delim("C:/Users/Tom/Documents/bed_files/UCSC Refseq/UCSCrefseq_singleisoform_noannotation.bed",
delim = "\t",
col_names = c("chr","start","stop","gene","quality","strand"))
df %<>% semi_join(list, by = c("chr" = "chr","start"="start","stop"="stop","gene"="gene","quality"="quality","strand"="strand"))
df %<>% select(4,7:(7+length(sample_names)-1))
df <- df[, c(1,4,5,6,7,2,3)]
df %<>% column_to_rownames(var="gene")
colnames(df) <- c("Mock_1","Mock_2","WT_1","WT_2","n12_1","n12_2")
pearson <- as.matrix(cor(df, method = c("pearson")))
r2 <- pearson * pearson
rm(dICP41,list, directory, files, i, sample_names)
n <- dim(df)[2] #number of columns
labels <- colnames(df) #makes a list of conditions
sizeItem = 16
sizeCor = 4
#list of heatmap plots
heatmaps <- list()
for (i in 2:n) { #starting in 2nd row
for (j in 1:(i-1)) { #starting in 1st column, limited to number of row - 1/bottom half of diagonal
# Data frame  of correlation values
df.point <- na.omit(data.frame(cbind(x = df[ , j], y = df[ , i])))
x = df.point[, 1]
y = df.point[, 2]
correlation = cor.test(x, y)
cor <- data.frame(rsquared = correlation$estimate * correlation$estimate)
cor$cor = paste0("R = ", sprintf("%.4f",correlation$estimate), "\n",
"R^2 = ", sprintf("%.4f", cor$rsquared))
# Plot, color code based on direct comparisons between condition replicates
if((i == j+1) && (i%%2==0)){
p <- ggplot(cor, aes(x = 1, y = 1)) +
geom_tile(fill = "orangered1", width=1, height=1) +
geom_text(aes(x = 1, y = 1, label = cor), colour = "White", size = 2, family = "Helvetica", show.legend = FALSE) +
theme_bw()+
theme(panel.grid = element_blank())
}else{
p <- ggplot(cor, aes(x = 1, y = 1)) +
geom_tile(fill = "steelblue") +
geom_text(aes(x = 1, y = 1, label = cor), colour = "White", size = 2, family = "Helvetica", show.legend = FALSE) +
theme_bw() +
theme(panel.grid = element_blank())
}
name <- paste0("Item", j, i)
heatmaps[[name]] <- p
}
}
#diagonals, diagonal line separating halves
diagonals <- list()
for(i in 1:n){
p <- ggplot()+
geom_abline(slope=-1, intercept = 1)+
theme_bw() + theme(panel.grid = element_blank())
name <- paste0("Item", i)
diagonals[[name]] <- p
}
## List of scatter plots
scatters <- list()
for (i in 1:(n-1)) {
for (j in (i+1):n) {
# Data frame
df.point <- na.omit(data.frame(cbind(x = df[ , j], y = df[ , i])))
# Plot, color code based on comparisons between biological replicates
if((j == i+1) && (j%%2==0)){
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2), aes(color = "orangered2")) +
stat_smooth(method="lm", colour="black") +
theme_bw() + theme(panel.grid = element_blank())
}else {
p <- ggplot(df.point, aes(x, y)) +
geom_jitter(size = .7, position = position_jitter(width = .2, height= .2)) +
stat_smooth(method="lm", colour="gray84") +
theme_bw() + theme(panel.grid = element_blank())
}
name <- paste0("Item", j, i)
scatters[[name]] <- p
}
}
# Convert the ggplots to grobs,
# and select only the plot panels
scatterGrob <- llply(scatters, ggplotGrob)
scatterGrob <- llply(scatterGrob, gtable_filter, "panel")
tileGrob <- llply(heatmaps, ggplotGrob)
tileGrob <- llply(tileGrob, gtable_filter, "panel")
diagonalGrob <- llply(diagonals, ggplotGrob)
diagonalGrob <- llply(diagonalGrob, gtable_filter, "panel")
## Set up the gtable layout
gt <- gtable(unit(rep(1, n), "null"), unit(rep(1, n), "null"))
## Add the plots to the layout
#Diagonal plots along the diagonal
for(i in 1:n) {
gt <- gtable_add_grob(gt, diagonalGrob[[i]], t=i, l=i)
}
# heatmaps in the lower half
k <- 1
for (i in 2:n) {
for (j in 1:(i-1)) {
gt <- gtable_add_grob(gt, tileGrob[[k]], t=i, l=j)
k <- k+1
} }
# scatters in the upper half
k <- 1
for (i in 1:(n-1)) {
for (j in (i+1):n) {
gt <- gtable_add_grob(gt, scatterGrob[[k]], t=i, l=j)
k <- k+1
} }
#Add item labels
gt <- gtable_add_cols(gt, unit(1.5, "lines"), 0)
gt <- gtable_add_rows(gt, unit(1.5, "lines"), 2*n)
for(i in 1:n) {
textGrob <- textGrob(labels[i], gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=n+1, l=i+1)
}
for(i in 1:n) {
textGrob <- textGrob(labels[i], rot = 90, gp = gpar(fontfamily = "Helvetica", fontsize = 8))
gt <- gtable_add_grob(gt, textGrob, t=i, l=1)
}
# Add small gap between the panels
for(i in n:1) gt <- gtable_add_cols(gt, unit(0.2, "lines"), i)
for(i in (n-1):1) gt <- gtable_add_rows(gt, unit(0.2, "lines"), i)
# Add chart title
# gt <- gtable_add_rows(gt, unit(1.5, "lines"), 0)
# textGrob <- textGrob("Correlation Matrix", gp = gpar(fontfamily = "Helvetica", fontface = "bold", fontsize = 8))
# gt <- gtable_add_grob(gt, textGrob, t=1, l=3, r=2*n+1)
#Add margins to the whole plot
for(i in c(2*n+1, 0)) {
gt <- gtable_add_cols(gt, unit(.75, "lines"), i)
gt <- gtable_add_rows(gt, unit(.75, "lines"), i)
}
grid.newpage()
grid.draw(gt)
tiff("correlation_matrix.tiff", height=5, width=5, units="in", res = 300)
grid.newpage()
grid.draw(gt)
while (!is.null(dev.list()))  dev.off()
